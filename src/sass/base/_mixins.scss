// media breakpoint down/up for responsive
@mixin media-breakpoint($breakpoint, $direction: down) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    @if $direction == up {
      @media (min-width: $breakpoint-value) {
        @content;
      }
    } @else if $direction == down {
      @media (max-width: $breakpoint-value) {
        @content;
      }
    }
  }
}

// media breakpoint between two size for responsive
@mixin media-breakpoint-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    @media (min-width: $lower-breakpoint) and (max-width: $upper-breakpoint) {
      @content;
    }
  } @else {
    @media (min-width: $lower) and (max-width: $upper) {
      @content;
    }
  }
}

// absolute center
@mixin absoluteCenter {
  position: absolute;
  top: 50%;
  left: 50%;
  @include transform(translate(-50%, -50%));
}

// transition
@mixin transition($what: all, $time: 0.3s, $how: ease-in-out) {
  -webkit-transition: $what $time $how;
  -moz-transition: $what $time $how;
  -ms-transition: $what $time $how;
  -o-transition: $what $time $how;
  transition: $what $time $how;
}

// transform
@mixin transform($transforms) {
  transform: $transforms;
  -webkit-transform: $transforms;
  -moz-transform: $transforms;
  -ms-transform: $transforms;
  -o-transform: $transforms;
}

// transform origin
@mixin transformOrigin($origin) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin;
  transform-origin: $origin;
}

// animation
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

// border radius
@mixin borderRadius($radius: 0) {
  border-radius: $radius;
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  -o-border-radius: $radius;
}

// placeholer
@mixin placeholder {
  &::-webkit-input-placeholder {
    /* Chrome/Opera/Safari */
    @content;
  }

  &::-moz-placeholder {
    /* Firefox 19+ */
    @content;
  }

  &:-ms-input-placeholder {
    /* IE 10+ */
    @content;
  }

  &:-moz-placeholder {
    /* Firefox 18- */
    @content;
  }
}

// mixin position
@mixin position(
  $position,
  $top: null,
  $right: null,
  $bottom: null,
  $left: null
) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

// mixin absolute
@mixin absolute($args...) {
  @include position(absolute, $args...);
}

// mixin relative
@mixin relative($args...) {
  @include position(relative, $args...);
}

// mixin fixed
@mixin fixed($args...) {
  @include position(fixed, $args...);
}

// fixed center
@mixin fixedCenter {
  position: fixed;
  top: 50%;
  left: 50%;
  @include transform(translate(-50%, -50%));
}
@mixin box($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}
@mixin flex-space-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}
@mixin flex-center-column {
  @include flex-center;
  flex-direction: column;
}

@mixin scale-img{
  @include transition;

  &:hover {
    box-shadow: $box-shadow;
    transform: scale(1.1);
  }
}